name: Auto-update Feature Branches

on:
  push:
    branches:
      - main

jobs:
  get-branches:
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.set-branches.outputs.branches }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch all branches
        run: |
          git fetch origin --prune
          echo "All remote branches: $(git branch -r)"
      - name: Get feature branches
        id: set-branches
        run: |
          branches=$(git branch -r | grep -E 'origin/feature[0-9a-zA-Z-]*' | sed 's/origin\///' | grep -v 'main' || echo "")
          branches_array=$(echo "$branches" | jq -R -s -c 'split("\n")[:-1]' || echo "[]")
          echo "Matched branches (JSON): $branches_array"
          echo "branches=$branches_array" >> $GITHUB_OUTPUT

  update-feature-branches:
    needs: get-branches
    runs-on: ubuntu-latest
    permissions:
      contents: write # Grant write permissions to the repository
    strategy:
      matrix:
        branch: ${{ fromJson(needs.get-branches.outputs.branches) || '[]' }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }} # Use the default token
      - name: Set up Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
      - name: Update feature branch
        if: ${{ matrix.branch != '' }}
        run: |
          echo "Updating ${{ matrix.branch }}..."
          git checkout ${{ matrix.branch }}
          git rebase origin/main || {
            echo "Rebase failed for ${{ matrix.branch }}, attempting merge..."
            git rebase --abort
            git merge origin/main --no-edit
          }
          git push --force-with-lease